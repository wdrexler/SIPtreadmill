- content_for(:page_icon) { "icon-rocket" }
- content_for(:page_title) { "Showing Test Run" }
- content_for(:page_subtitle) { "#{@test_run.name}"}
= render "layouts/page_header"
#page_test_run.container-fluid.padded
  .row-fluid
    .span3
      .box
        .box-header
          %span.title= @test_run.name
          %ul.box-toolbar
            %li= link_to '', test_runs_path, class: 'btn btn-primary icon-list', title: 'List'
            - if @test_run.state == 'pending'
              %li= link_to '', edit_test_run_path(@test_run), class: 'btn btn-warning icon-edit', title: 'Edit'
            %li= link_to '', "/test_runs/#{@test_run.id}/copy", class: 'btn alert-info icon-copy', title: "Clone"
            - unless @test_run.state == 'running'
              %li= link_to '', @test_run, method: :delete, data: { confirm: 'Are you sure?' }, class: 'btn btn-danger icon-trash', title: 'Delete'
        .box-content.padded
          %dl
            %dt Name:
            %dd= @test_run.name
            %dt Description:
            %dd= @test_run.description
            - if current_user.admin_mode
              %dt Owned by
              %dd= @test_run.user.full_name if @test_run.user

            %dt Sender scenarios:
            - @test_run.scenarios.each_with_index do |s, i|
              %dd= link_to(s.name, s) if s
              %dd= "Port: #{@test_run.local_ports_array[i+1]}"

            - if @test_run.registration_scenario
              %dd
                Registration:
                = link_to(@test_run.registration_scenario.name, @test_run.registration_scenario) if @test_run.registration_scenario

            %dt Receiver scenario:
            %dd= link_to(@test_run.receiver_scenario.name, @test_run.receiver_scenario) if @test_run.receiver_scenario
            %dd= "Port: #{@test_run.local_ports_array[0]}"


            %dt Profile:
            %dd= link_to @test_run.profile_name, @test_run.profile
            - if @test_run.profile.use_time
              %dd= "Duration: #{@test_run.profile.duration}"
            - else
              %dd= "Max Calls: #{@test_run.profile.max_calls}"
            %dd= "Max Concurrent: #{@test_run.profile.max_concurrent}"
            %dd= "CPS: #{@test_run.profile.calls_per_second}"
            - if @test_run.profile.calls_per_second_max
              %dd= "CPS Max: #{@test_run.profile.calls_per_second_max}"
              %dd= "CPS Increment: #{@test_run.profile.calls_per_second_incr}"
              %dd= "CPS Interval: #{@test_run.profile.calls_per_second_interval}"
            %dd= "Transport type: #{@test_run.profile.transport_type.text}"

            %dt
              Target:
              = link_to @test_run.target_name, @test_run.target
            %dd= "SIP user: #{@test_run.to_user}"
            %dd= "Address: #{@test_run.target.address}"

            %dt Logs:
            %dd= link_to "Errors Report", @test_run.errors_report_file_url
            %dd= link_to "Raw Stats", @test_run.stats_file_url

            %dt Created:
            %dd
              %a{"data-original-title" => @test_run.created_at.to_s(:long_ordinal), "data-placement" => "right", "data-toggle" => "tooltip", :href => "#", :title => ""}
                = time_ago_in_words(@test_run.created_at) + " ago"
              by
              = @test_run.user.full_name if @test_run.user

            - if @test_run.created_at != @test_run.updated_at
              %dd
                Last Updated:
                %a{"data-original-title" => @test_run.updated_at.to_s(:long_ordinal), "data-placement" => "right", "data-toggle" => "tooltip", :href => "#", :title => ""}
                  = time_ago_in_words(@test_run.updated_at) + " ago"

            %dt Status
            %dd#statusLabel= status_label @test_run.state

            - if @test_run.state == 'complete_with_errors'
              %dt Error Name
              %dd= @test_run.error_name
              %dt Error Message
              %dd= @test_run.error_message

    - if @test_run.state == 'running' || @test_run.state == 'queued'
      .span9
        .box
          .box-header
            %span.title Ramper
          .box-content.padded
            #div_call_rate{ style: "height:100%; width:100%" }
              #btn_decrease_call_rate{ class: "btn btn-success icon-minus", type: "button", style: 'position: relative; top: -5px;' }
              %input#tfield_call_rate{ type: "text", name: "call_rate", maxlength: "6", value: "#{@test_run.profile.calls_per_second}", style: 'width: 75px' }
              #btn_increase_call_rate{ class: "btn btn-success icon-plus", type: "button", style: 'position: relative; top: -5px;' }

    .span9
      - case @test_run.state
        - when 'pending'
          .box
            .box-header
              %span.title Job pending
            .box-content.padded
              = form_tag enqueue_test_run_path(@test_run), method: "post" do
                - unless @test_run.target.ssh_username.nil? || @test_run.target.ssh_username.empty?
                  = password_field_tag :password
                  = label_tag :password, "SSH Password for Target"
                = submit_tag "Enqueue", {class: "btn btn-success"}
        - when 'queued'
          .box#inProgress
            .box-header
              %span.title Job is queued, #{@stats.enqueued} jobs in the queue
            .box-content.padded
              %p= button_to "Cancel", cancel_test_run_path(@test_run), {class: "btn btn-danger"}
      .row-fluid#graphs
        .span12
          .box
            .box-header
              %span.title Test run results
            .box-content.padded
              %h2 Total Calls
              #callsChart{style: 'height: 250px'}
                %svg
              %h3 Calls Per Second / Concurrent Calls
              #callRateChart{style: 'height: 250px'}
                %svg
              %h2 Jitter
              #jitterChart{style: 'height: 250px'}
                %svg
              %h2 Packet Loss
              #packetLossChart{style: 'height: 250px'}
                %svg
              %h2 Target Resources
              #targetResourcesChart{style: 'height: 250px'}
                %svg
      .row-fluid#stats
        .span6
          .box
            .box-header
              %span.title Performance
            .box-content.padded
              %dl
                %dt Total calls
                %dd#totalCalls= @test_run.total_calls
                %dt Successful calls
                %dd#successfulCalls= @test_run.successful_calls
                %dt Failed calls
                %dd#failedCalls= @test_run.failed_calls
                %dt Average call duration
                %dd#avgCallDuration= @test_run.avg_call_duration
                %dt Average CPS
                %dd#avgCPS= @test_run.avg_cps
        .span6
          .box
            .box-header
              %span.title QoS
            .box-content.padded
              %dl
                %dt Average jitter
                %dd#avgJitter= @test_run.avg_jitter
                %dt Max jitter
                %dd#maxJitter= @test_run.max_jitter
                %dt Average packet loss
                %dd#avgPktLoss= @test_run.avg_packet_loss
                %dt Max packet loss
                %dd#maxPktLoss= @test_run.max_packet_loss
      .row-fluid#summary
        .span12
          .box
            .box-header
              %span.title Test run summary
            .box-content.padded
              %pre{style: 'font-size: 0.8em'}
                = @test_run.summary_report
:javascript
  function getColors() {
    return #{@test_run.total_calls_colors}
  }
- if @test_run.state == 'queued' || @test_run.state == 'running'
  :javascript
    var pressTimer;
    var interval;
    function setTestRunInterval() {
       window.testRunInterval = window.setInterval(refreshTestRun, 1000, #{@test_run.id});
    }
    $(function() {
      $('#tfield_call_rate').keypress(function(evt) {
        if(evt.which == 13) {
          submitCallRate(#{@test_run.id});
          return true;
        }
      });
      $('#btn_increase_call_rate').on('click', function () {
        if(longpress) { // if detect hold, stop onclick function
          return false;
        };
        increaseCallRate(#{@test_run.id});
      });

      $('#btn_increase_call_rate').on('mousedown', function () {
        longpress = false;
        pressTimer = window.setTimeout(function(){
          longpress = true;
          interval = setInterval(function(){increaseCallRate(#{@test_run.id})}, 500);
        },500);
      });

      $('#btn_increase_call_rate').on('mouseup', function () {
        clearTimeout(pressTimer);
        clearInterval(interval);
      });

      $('#btn_decrease_call_rate').on('click', function () {
        if(longpress) { // if detect hold, stop onclick function
          return false;
        };
        decreaseCallRate(#{@test_run.id});
      });

      $('#btn_decrease_call_rate').on('mousedown', function () {
        longpress = false;
        pressTimer = window.setTimeout(function(){
          longpress = true;
          interval = setInterval(function(){decreaseCallRate(#{@test_run.id})}, 500);
        },500);
      });

      $('#btn_decrease_call_rate').on('mouseup', function () {
        clearTimeout(pressTimer);
        clearInterval(interval);
      });

<<<<<<< HEAD
      $('#btn_submit_call_rate').on('click', function () {
        submitCallRate(#{@test_run.id});
      });
=======
      $('#graphs').hide();
      $('#stats').hide();
      $('#summary').hide();
      setTestRunInterval();
    });
- if @test_run.state == 'pending'
  :javascript
    $(function() {
      $('#graphs').hide();
      $('#stats').hide();
      $('#summary').hide();
>>>>>>> Style cleanup, enhancements, and merge conflict resolution for the TestRun#show view
    });

- if @test_run.state =~ /complete/
  :javascript
    $(function() {
      drawTotalCallsGraph(#{@test_run.total_calls_json}, '#callsChart', getColors());
      drawLineGraph(#{@test_run.jitter_json}, {'target': '#jitterChart', 'xAxis': 'Time', 'yAxis': 'Jitter'});
      drawLineGraph(#{@test_run.packet_loss_json}, {'target': '#packetLossChart', 'xAxis': 'Time', 'yAxis': 'Packet Loss'});
      drawLineGraph(#{@test_run.call_rate_json}, {'target': '#callRateChart', 'xAxis': 'Time', 'yAxis': 'Calls'});
      drawLineGraph(#{@test_run.target_resources_json}, {'target': '#targetResourcesChart', 'xAxis': 'Time', 'yAxis': 'Resources'});
    });
